#!/usr/bin/env zsh
#
# -*- mode: sh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
#
# Copyright (c) 2022 zdharma-continuum and contributors
# Copyright (c) 2016-2022 Sebastian Gniazdowski and contributors.

zi÷action-complete()
{
    # Emulate zsh and useful options
    emulate -L zsh -o extended_glob -o warn_create_global -o typeset_silent \
        -o no_short_loops -o rc_quotes -o no_auto_pushd

    # The index of the match that's inserted in cmd line
    integer -g ziac_midx
    typeset -ga ziac_matches ziac_wids
    typeset -g ziac_prevw ziac_mt
    local -a match mbegin mend
    typeset -gA Times

    # Emulate real time if needed
    if (( !$+EPOCHREALTIME )); then
        (( !$+SECONDS )) && float -g SECONDS
        float EPOCHREALTIME=$SECONDS
    fi

    #
    # Invoke the helper/worker function that does all needed $BUFFER processing
    #

    zi÷process-buffer || return 1

    integer i j pos=$CURSOR size=${#ZINIT_PB_WORDS} newcursor
    local w PWIDGET buf
    (( Times[$WIDGET] = Times[$WIDGET] <= 0 ?
                    EPOCHREALTIME-3 : Times[$WIDGET] ))
    # Detect series.
    if (( EPOCHREALTIME - Times[$WIDGET] < 1.5 )); then
        PWIDGET=$WIDGET
    else
        PWIDGET= ziac_prevw=
    fi
    Times[$WIDGET]=$EPOCHREALTIME

    # Cursor at empty space? Only if not use the word
    [[ $BUFFER[CURSOR] == [[:space:]] ]] || \
        w=$ZINIT_PB_WORDS[ZINIT_PB_SELECTED_WORD]

    if [[ $WIDGET == zi÷action-complete-ice && $WIDGET != $PWIDGET && \
        ( $ziac_prevw != $w || -z $w ) ]]
    then
        local -a ice_order=(
            ${(Aons:|:)ZINIT[ice-list]}
            ${(@)${(A@kons:|:)${ZINIT_EXTS[ice-mods]//\'\'/}}/(#s)<->-/}
        )
        ziac_prevw=$w
        match=()
        w=${w//(#b)(([=:]|)[\'\"]?#([\'\"]|(#e)))/}
        ziac_mt=$match[1]

        ziac_matches=( ${(onM)ice_order:#*$w*} )
    elif (( ziac_midx )) && [[ $WIDGET == *-ice && $WIDGET == $PWIDGET ]]; then
      ziac_midx+=1
    fi
    if [[ $WIDGET == zi÷action-complete && $WIDGET != $PWIDGET && \
        ( $ziac_prevw != $w || -z $w ) ]]; then
        ziac_matches=( $ZINIT[PLUGINS_DIR]/*${w//\//---}*(-onND[1,18]) )
        ziac_prevw=$w
        ziac_mt=
    elif (( ziac_midx )) && [[ $WIDGET == *-complete && $WIDGET == $PWIDGET ]]; then
        ziac_midx+=1
    fi
    if (( !ziac_midx || ziac_midx > $#ziac_matches )); then
        ziac_midx=1
    fi

    if [[ -z $ziac_matches ]]; then
        zle -M "No matches for $w found"
        return 1
    fi
    zle -M "${(j: :)${ziac_matches[@]:t}//---//}"
    REPLY=${${ziac_matches[$ziac_midx]:t}//---//}$ziac_mt
    for (( i=1; i<=size; i++ )); do
        # Check if we're at (i.e. directly at or after,
        # when after are just spaces) current word
        if [[ $i = $ZINIT_PB_SELECTED_WORD ]]; then
            # INSERT MODE? I.e.: addition of a new token at the pointed free space?
            if (( pos > (ZINIT_PB_WORDS_BEGINNINGS[i] + ${#ZINIT_PB_WORDS[i]} - 1) )); then
                # We need to introduce new word
                # First move all words and spaces forward
                for (( j=size; j>=i+1; j-- )); do
                    ZINIT_PB_WORDS[j+1]=${ZINIT_PB_WORDS[j]}
                    ZINIT_PB_SPACES[j+1]=${ZINIT_PB_SPACES[j]}
                    ZINIT_PB_WORDS_BEGINNINGS[j+1]=${ZINIT_PB_WORDS_BEGINNINGS[j]}
                done
                size+=1
                # New word is introduced at position i+1, after current word
                # It doesn't have word beginnings and spaces assigned
                # It has to take spaces from word next to it, i+2
                ZINIT_PB_WORDS[i+1]=$REPLY
                ZINIT_PB_WORDS_BEGINNINGS[i+1]="$(( pos + 1 ))"

                # Now split spaces
                # cursor_spaces: spaces from current word to the cursor
                integer cursor_spaces=$(( pos - ZINIT_PB_WORDS_BEGINNINGS[i] - ${#ZINIT_PB_WORDS[i]} + 1 ))
                # take that from spaces of word "next" in: current NEW next
                integer after_spaces=$(( ZINIT_PB_SPACES[i+2] - cursor_spaces ))
                local empty=""
                ZINIT_PB_SPACES[i+1]="${(l:cursor_spaces:: :)empty}"
                ZINIT_PB_SPACES[i+2]="${(l:after_spaces:: :)empty}"

                # Cursor will be at end of newly added word
                newcursor=$(( ZINIT_PB_WORDS_BEGINNINGS[i+1] + ${#ZINIT_PB_WORDS[i+1]} - 1 ))
            # OR REPLACE MODE – substitute the match for the input/needle token
            else
                ZINIT_PB_WORDS[i]=$REPLY

                # Cursor will be at end of newly substituted word
                newcursor=$(( ZINIT_PB_WORDS_BEGINNINGS[i] + ${#ZINIT_PB_WORDS[i]} - 1 ))

                # Update word beginnings of following words – skipped
            fi
        fi
        buf+=$ZINIT_PB_SPACES[i]$ZINIT_PB_WORDS[i]
    done

    buf+=$ZINIT_PB_SPACES[i]
    BUFFER=$buf
    CURSOR=$newcursor
}

