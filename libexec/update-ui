#!/usr/bin/env zsh
emulate -L zsh -o extendedglob -o typesetsilent
0=${${ZERO:-${(%):-%x}}:A}
ZUI_DIR=$0:h:h/lib/zui-lib ZINIT_DIR=$0:h:h
source $ZUI_DIR/zui.lib.zsh||return 1
local -A ZINIT=(NO_PLGS_SRC 1)
source $ZINIT_DIR/zinit.zsh
fpath+=($ZINIT_DIR/functions)
builtin autoload -z \
    $ZINIT_DIR/functions/*[A-Za-z0-9](.,@:t)

-zui_glib_cleanup deserialize:"z4-update-UI"
-zui_glib_init app:z4-update-UI app_name:"Zinit 4 update UI"
emulate -L zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_glib_init2 # after emulate -LR
ZUI[START_IN_QUERY]=1

iqerr iqw(){
    -zui_glib_msg "${@//\{[^\}]##\}/}"
}

-zui_glib_store_default_app_config s:timeout 131
-zui_glib_store_default_app_config b:instant_search 1
-zui_glib_store_default_app_config b:instant_select 1
-zui_glib_store_default_app_config s:text_mode off
-zui_glib_store_default_app_config s:mark "yellow GREEN lineund reverse bold"
-zui_glib_store_default_app_config s:mark2 "white BLUE lineund reverse bold"
-zui_glib_store_default_app_config s:altmark "yellow GREEN reverse bold"
-zui_glib_store_default_app_config s:altmark2 "white BLUE reverse bold"
-zui_glib_store_default_app_config b:top_anchors 0
-zui_glib_store_default_app_config b:border 1
-zui_glib_store_default_app_config b:status_size 5

ZUI[start_tm]=$EPOCHREALTIME
ZUI[UNIQ_MODE]=0
ZUI[QUERY_CHANGE_CALLBACK]=z4÷uui-query-change-cb
ZUI[key-timeout]=0.3
typeset -a -g coproc_output
local ustarted=0 pstarted=0  # denote if configure/make is running

zui::bindkey F14 '{builtin zcurses end;sleep 3;}'
source $ZINIT_DIR/share/update-ui.rc
z4÷uui-toggle-prompt(){zui::toggle-prompt;}
z4÷uui-query-change-cb(){
    local Q=${1:-$ZUI[IN_QUERY]}
    ZUI[QUERY_PROMPT]="·grep·> " ZUI[IN_QUERY]=$Q
    typeset -g in_query=$Q
    ZUI[cursor]=$#ZUI[SEARCH_BUFFER]+1
}
z4÷uui-save-screen(){
    integer QNCOL=$1 QIDX=$ZUI[SAVE_FILE_IDX]
    QIDX+=1
    ZUI[SAVE_FILE_IDX]=$QIDX

    # create file
    local FNAME=z4_update_ui_save.$QIDX ITE
    : >!$PWD/$FNAME

    # populate it
    if ((QNCOL));then
        foreach ITE ("$coproc_output[@]")
            z4÷prune-esc $ITE
            builtin printf %s\\n $REPLY>>!$PWD/$FNAME
        end
        local BIT=" (no colors)"
    else
       builtin printf %s\\n "$coproc_output[@]">!$PWD/$FNAME
    fi
    iqw "" "Notice: " "saved $#coproc_output lines to: " \
        ./$FNAME $BIT
}
z4÷uui-err-search(){
    ZUI[IN_QUERY]=$FLAG_SEARCH
    typeset -g in_query=$FLAG_SEARCH
    if [[ $ZUI[SEARCH_BUFFER] == $Z4_UPUI_ERROR_SEARCH ]]
    then
        ZUI[SEARCH_BUFFER]= 
        typeset -g buffer=
    else
        ZUI[SEARCH_BUFFER]=$Z4_UPUI_ERROR_SEARCH
        typeset -g buffer=$Z4_UPUI_ERROR_SEARCH
    fi
    ZUI[cursor]=$#ZUI[SEARCH_BUFFER]+1
}

demo_generator_A() {
    local mod="$1" ice="$2"

    reply=()
    -zui_glib_rc_button "button1" "$ZUI[BOLD]${ZUI[GREEN]}RUN: zinit update --all${ZUI[FMT_END]}" 'internal=1; coproc 2>&1 zinit update --all; ustarted=1'
    -zui_glib_rc_button "button2" "$ZUI[BOLD]${ZUI[YELLOW]}Job status${ZUI[FMT_END]}" 'internal=1; get_zinit_update_pid'
    -zui_glib_rc_button "button3" "$ZUI[BOLD]${ZUI[MAGENTA]}RUN: zinit update --parallel${ZUI[FMT_END]}" 'internal=1; coproc 2>&1 zinit update --parallel; pstarted=1'

    # Content
    reply=( "" "${reply[1]} ${reply[2]} ${reply[3]}" )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors
    reply2=( )              reply3=( 1 )                reply4=( )
}

demo_generator_B() {
    reply=()
    -zui_glib_special_text "Below gathered is \`zinit update\` output"
    -zui_glib_button "button4" "$ZUI[BOLD]${ZUI[BLUE]}(CLEAR)${ZUI[FMT_END]}" 'internal=1; coproc_output=(); -zui_glib_fly_mod_regen 2 1'
    -zui_glib_special_text "${(r:COLUMNS-2::—:)}"
    reply=( "$ZUI[BOLD]${ZUI[YELLOW]}${reply[1]}${ZUI[FMT_END]} ${reply[2]}" "$ZUI[BOLD]${ZUI[GREEN]}${reply[3]}${ZUI[FMT_END]}" "${coproc_output[@]}" )  reply2=( )  reply3=( 1 )  reply4=( )
}

# Read & publish configure/make output
-zui-standard-timeout-callback() {
    ((ZUI[start_tm]&&(EPOCHREALTIME-ZUI[start_tm])>0.1))&&\
    {
            ZUI[redraw]=1 ZUI[start_tm]=0
            ((ZUI[CURRENT_IDX]<2))&&ZUI[CURRENT_IDX]=2
    }
    (( pstarted + ustarted == 0 )) && return

    local line had_read=0
    repeat 20; do
        read -r -p -t 0 line 2>/dev/null && { 
            had_read=1
            z4÷colreduce "$line"
            coproc_output+=("$REPLY")
        } || break
    done

    ((had_read))&&-zui_glib_fly_mod_regen 2 1
    ((pstarted!=0&&had_read==0))&&[[ $jobtexts[*] != *zinit* ]] && {repeat 3 {print -n -- ${terminfo[bel]:-$'\07'};LANG=C sleep 0.1;};ZUI[redraw]=1; pstarted=0; -zui_glib_msg "EVENT! " "zinit update --all -p" " ended";}
    (( ustarted != 0 && had_read == 0 )) && [[ $jobtexts[*] != *zinit* ]] && { repeat 3 {print -n -- ${terminfo[bel]:-$'\07'};LANG=C sleep 0.1;}; ZUI[redraw]=1; ustarted=0; -zui_glib_msg "EVENT! " "zinit update --all" " ended"; }
}

get_zinit_update_pid() {
    emulate -L zsh -o extendedglob
    local JOB TMP TXT
    local -a BITS=()
    if (($#jobstates==0));then
        -zui_glib_msg "READY" ", No jobs running"
        return 0
    fi
    foreach JOB (${(k)jobtexts})
        TXT=$jobtexts[$JOB] TMP=$jobstates[$JOB]
        TXT=${TXT//[[:space:]]#[0-9]#\>\&[0-9]##/}
        BITS=("JOB[$JOB]: " "$TXT" " – " STATE: ${TMP%%:*}/ PID:${${(MS)TMP##[0-9]##\=}%\=}\ )
        -zui_glib_msg "$BITS[@]"
    end
    return 1
}

iqw ""
iqw "Welcome to the " "" "Z4 Update-UI" "" "!"
iqw "Hint: Alt-Space is the quick-error search. " \
    "" "Ctrl-Space jumps to/from errors. " \
    "Ctrl-/ toggles search prompt. " \
    "It supports regexes."

## Start application ##
zui-event-loop 1:demo_generator_A 1:demo_generator_B

-zui_glib_cleanup serialize

return 0

# vim:ft=zsh
